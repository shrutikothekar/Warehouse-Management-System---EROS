@* @model IEnumerable<eros.Models.Picking_Operation> *@
@* @model List<eros.Models.Picking_Operation> *@

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string role = Context.Request.HttpContext.Session.GetString("Role");
    var jsonData = Context.Request.HttpContext.Session.GetString("MenuMaster");
}
@if (!string.IsNullOrEmpty(role))
{
    @if (role == "ADMIN" || role == "WAREHOUSE" || role == "HOSITE")
    {
        <div class="container">
            <div class="mt-3">
                <div class="card mb-3">
                    <div class="card-header bg-dark text-white">
                        <div class="d-flex align-items-baseline">
                            <h5 class="mx-auto font-weight-bolder small-heading ">Picking Operation</h5>
                            <a asp-action="Create" class="btn btn-success text-white btn-sm">
                                <i class="fas fa-plus-square"></i> Picking 
                            </a>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">

                            <table class="table table-bordered table-hover" id="dataTable" width="100%" cellspacing="0">
                                <thead class="thead-light text-center">
                                    <tr>
                                        <th>Sr.No.</th>
                                        <th style="display:none">Pick Id</th>
                                        <th>Order No.</th>
                                        <th>Picked Date</th>
                                        <th>Status Found</th>
                                    </tr>
                                </thead>
                                <tbody class=" text-center">
                                    @{
                                        int counter = 1;
                                    }
                                    @foreach (var item in Model)
                                    {
                                        <tr>
                                            <td>
                                                @counter
                                            </td>
                                            <td style="display:none">
                                                @item.Id
                                            </td>
                                            <td>
                                                @item.Sono
                                            </td>
                                            <td>
                                                @DateTime.ParseExact(item.date, "yyyy-MM-dd", null).ToString("dd-MM-yyyy")
                                            </td>
                                            <td>
                                                @if (item.Status == "Suspend")
                                                {
                                                    <div>
                                                        <span class="badge badge-warning p-1" style="cursor:pointer;" onclick="showResumeMessage('@item.Sono', '@item.Id')">Suspend</span>
                                                    </div>
                                                }
                                                
                                                else
                                                {
                                                    <span class="badge badge-success p-1" style="cursor:pointer;" onclick="showExitMessage('@item.Sono')">Completed</span>
                                                }

                                            </td>
                                        </tr>
                                        counter++;
                                    }
                                </tbody>
                            </table>

                        </div>
                    </div>
                </div>
            </div>
        </div>

    }
    else
    {
        <div class="container">
            <div class="alert alert-danger alert-dismissible fade show">
                <h6 class="alert-heading">
                    <i class="bi-exclamation-octagon-fill"></i>
                    No Access !!
                </h6>
                <p>
                    You do not have access to this page. Please contact your administrator for assistance.
                </p>
                <hr>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        </div>
    }
}

<style>
    label {
        font-size: small; /* You can also use specific values like 10px or 0.8em */
        font-weight: 700;
    }

    .small-heading {
        font-size: 1rem; /* Adjust the font size as needed */
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>


    $('.delete-link').on('click', function (e) {
        //e.preventDefault();

        var id = $(this).data('id');
        var url = '/Picking_Operation/Delete/' + id;

        Swal.fire({
            title: 'Are you sure?',
            text: 'You won\'t be able to revert this!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    type: 'GET',  // You can use 'GET' if your action allows it
                    url: url,
                    data: { id: id },
                    success: function (response) {
                        // Handle success if needed
                        window.location.href = '/Picking_Operation/Index'; // Redirect to Index or another page
                    },
                    error: function () {
                        // Handle error if needed
                    }
                });
            }
        });
    });

    function confirmSuspend(sono) {
        Swal.fire({
            title: 'Are you sure?',
            text: 'You are about to suspend the process for Sono: ' + sono,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, suspend it!'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '@Url.Action("Suspend", "Picking_Operation")?sono=' + sono;
            }
        });
    }

    function showExitMessage(sono) {
        Swal.fire({
            title: '<h5>This Sale Order Number ' + sono + ' Picking Operation Has Already Been Completed !</h5>',
            text: 'The selected sale order is already marked as complete.',
            icon: 'info',
            confirmButtonText: 'OK'
        });
    }


    function showResumeMessage(sono, Id) {
        console.log(sono);
        Swal.fire({
            title: 'Resume Process',
            text: 'Do you want to resume the process for sale order: ' + sono + '?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, resume it!',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '@Url.Action("Edit", "Picking_Operation")?sono=' + sono + '&Id=' + Id;
            }
        });
    }


</script>


