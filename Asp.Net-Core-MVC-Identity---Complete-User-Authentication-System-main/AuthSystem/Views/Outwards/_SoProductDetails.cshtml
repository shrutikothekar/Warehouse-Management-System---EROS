@model eros.Models.inward
@{
    string[] TableHeaders = new string[] {
        "Product Code",
        "Product Name.",
        "Br.",
        "Qty",
        "No. set/pro." ,
        "No. Qty/shp" ,
        "No. shp/Qty" ,
        "Ttl shp" ,
        "Ttl sub",
        "SC",
         };
    string role = Context.Request.HttpContext.Session.GetString("Role");
    var jsonData = Context.Request.HttpContext.Session.GetString("MenuMaster");
}
@if (!string.IsNullOrEmpty(role))
{
    @if (role == "ADMIN")
    {

    }
    else if (role == "HOSITE")
    {

    }
    else if (role == "WAREHOUSE")
    {

    }
    else
    {
        <div class="container">
            <div class="alert alert-danger alert-dismissible fade show">
                <h6 class="alert-heading">
                    <i class="bi-exclamation-octagon-fill"></i>
                    No Access !!
                </h6>
                <p>
                    You do not have access to this page. Please contact your administrator for assistance.
                </p>
                <hr>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        </div>
    }
}
<style>
    label {
        font-size: small; /* You can also use specific values like 10px or 0.8em */
        font-weight: 700;
    }

    .small-heading {
        font-size: 1rem; /* Adjust the font size as needed */
    }
</style>
<div class="row">
    @* referenceno , partyname *@
    @* <div class="form-group col-sm-4 mt-3">
    <label asp-for="dcno" class="control-label"></label>
    <input id="sreferencenoId1" asp-for="dcno" data-uppercase autocomplete="off" class="form-control" />
    <span asp-validation-for="dcno" class="text-danger"></span>
    </div> *@

    @* <div class="form-group col-sm-4 mt-3">
    <label asp-for="referenceno" class="control-label"></label>
    <input id="sreferencenoId" asp-for="referenceno" data-uppercase autocomplete="off" class="form-control" />
    <span asp-validation-for="referenceno" class="text-danger"></span>
    </div>

    <div class="form-group col-sm-4 mt-3">
    <label asp-for="dcdate" class="control-label"></label>
    <input asp-for="dcdate" data-uppercase autocomplete="off" id="saddressId" class="form-control" type="date" />
    <span asp-validation-for="dcdate" class="text-danger"></span>
    </div>
    <div class="form-group col-sm-4 mt-3">
    <label asp-for="invoiceno" class="control-label"></label>
    <input asp-for="invoiceno" data-uppercase autocomplete="off" id="sinvoicenoId" class="form-control" type="text" />
    <span asp-validation-for="invoiceno" class="text-danger"></span>
    </div> *@
    <div>
        @{
            // Get sono value from ViewData
            var sonoValue = @ViewData["SonoValue"] as string;
        }
        <input style="display:none" id="sono" class="form-control"  value="@sonoValue" />
    </div>
</div>
<div class="row mx-lg-2 mx-md-2">
    @* contact , address *@
    <div class="form-group col-sm-4 mt-2">
        <label asp-for="partyname" class="control-label">Partyname</label>
        <input id="spartynameIdinput" class="form-control" asp-for="partyname" readonly />
        <span asp-validation-for="partyname" class="text-danger"></span>
    </div>
    <div class="form-group col-sm-4 mt-2">
        <label asp-for="contactno" class="control-label"></label>
        <input asp-for="contactno" data-uppercase autocomplete="off" id="scontactnoId" class="form-control" readonly />
        <span asp-validation-for="contactno" class="text-danger"></span>
    </div>
    <div class="form-group col-sm-4 mt-2">
        <label asp-for="address" class="control-label"></label>
        <input asp-for="address" data-uppercase autocomplete="off" id="saddressId" class="form-control" readonly />
        <span asp-validation-for="address" class="text-danger"></span>
    </div>
</div>
<div class="col-md-12 mx-lg-2 mx-md-2">
    @* table *@
    <table id="CodesTable" class="table table-striped table-sm">
        <thead>
            <tr>
                @foreach (var head in TableHeaders)
                {
                    <th>
                        @head
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.inwardPacket.Count; i++)
            {
                <tr>
                    <td style="display:none;">
                        <input asp-for="@Model.inwardPacket[i].sono" value="@sonoValue" class="form-control" readonly />
                    </td>
                    <td>
                        <input asp-for="@Model.inwardPacket[i].productcode" class="form-control" readonly />
                        <span asp-validation-for="@Model.inwardPacket[i].productcode" class="text-danger"></span>
                    </td>
                    <td>
                        <input asp-for="@Model.inwardPacket[i].description" class="form-control" readonly />
                        <span asp-validation-for="@Model.inwardPacket[i].description" class="text-danger"></span>
                    </td>
                    <td>
                        <input asp-for="@Model.inwardPacket[i].brand" class="form-control" readonly />
                        <span asp-validation-for="@Model.inwardPacket[i].brand" class="text-danger"></span>
                    </td>
                    <td>
                        <input asp-for="@Model.inwardPacket[i].quantity" class="form-control quantity-input" data-quantity="@Model.inwardPacket[i].quantity" data-product-code="@Model.inwardPacket[i].productcode" />
                        <span asp-validation-for="@Model.inwardPacket[i].quantity" class="text-danger"></span>
                    </td>
                  
                    <td>
                        <input asp-for="@Model.inwardPacket[i].setofsub_assemb" class="form-control" />
                        <span asp-validation-for="@Model.inwardPacket[i].setofsub_assemb" class="text-danger"></span>
                    </td>

                    <td>
                        <input asp-for="@Model.inwardPacket[i].qtyperpkt" class="form-control" />
                        <span asp-validation-for="@Model.inwardPacket[i].qtyperpkt" class="text-danger"></span>
                    </td>
                    <td>
                        <input asp-for="@Model.inwardPacket[i].noofpackets" class="form-control noofpackets-input" oninput="calculate(this)" />
                        <span asp-validation-for="@Model.inwardPacket[i].noofpackets" class="text-danger"></span>
                    </td>

                    <td>
                        <input asp-for="@Model.inwardPacket[i].totalpacket" readonly class="form-control totalpacket-input" />
                        <span asp-validation-for="@Model.inwardPacket[i].totalpacket" class="text-danger"></span>
                    </td>
                    <td>
                        <input asp-for="@Model.inwardPacket[i].totalsubassmbly" id="totalsubassembly" class="form-control totalsubassembly" readonly />
                        <span asp-validation-for="@Model.inwardPacket[i].totalsubassmbly" class="text-danger"></span>
                        <input type="hidden" asp-for="@Model.inwardPacket[i].IsDeleted" />
                    </td>
                    <td style="display:none;">
                        <input asp-for="@Model.inwardPacket[i].uom" class="form-control" readonly />
                        <span asp-validation-for="@Model.inwardPacket[i].uom" class="text-danger"></span>
                    </td>
                    <td>
                        <a id="editDetail-@i" class="btn text-white btn-sm btn-warning poedit-button"
                           data-id="@Model.inwardPacket[i].id"
                           data-quantity="@Model.inwardPacket[i].quantity"
                           data-productcode="@Model.inwardPacket[i].productcode"
                           data-sono="@sonoValue">
                            View
                        </a>
                    </td>
                   
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    function calculate(input) {
        var parentRow = input.closest('tr');
        var quantity = parseInt(parentRow.querySelector('.quantity-input').value);
        var noofshpperqty = parseInt(parentRow.querySelector('.noofpackets-input').value);
        var totalPacketInput = parentRow.querySelector('.totalpacket-input');
        var totalShipper = noofshpperqty * quantity;
        totalPacketInput.value = totalShipper;
    }


    var quantityInputs = document.querySelectorAll('.quantity-input');
    quantityInputs.forEach(function (input) {
        // alert("Quantity changes....");
        input.addEventListener('change', function () {
            var enteredQuantity = parseFloat(this.value);
            if (enteredQuantity <= 0) { // Check if quantity is less than zero
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Quantity',
                    text: 'Quantity cannot be less than 0 :)',
                });
                this.value = '0'; // Reset value to 0
            }
        });
    });

    //_partialAddSerialso
    $(document).on('click', '.boq-button', function () {
        // var selectedValue = $(this).closest('tr').find('.templatenamecl option:selected').text();
        var selectedValue = $(this).closest('tr').find('input[name*="templatename"]').val();
        var currentRow = $(this).closest('tr');
        var productcode = currentRow.find('input[name*="productcode"]').val();

        // Ensure product code exists
        if (productcode) {
            $.ajax({
                url: '/Outwards/GetTemplateData',
                type: 'GET',
                data: { templateName: selectedValue, productcode: productcode },
                success: function (data) {
                    // // populateTemplateTable(data);
                    // // $('#form-modal').modal('show');
                    // showInModal(data); // Show data in modal
                    if (data && data.length > 0) {
                        showInModal(data); // Show data in modal
                    } else {
                        showNoDataFoundModal();
                    }
                },
                error: function (xhr, status, error) {
                    console.error("An error occurred while executing the action: " + error);
                }
            });
        }
    });

    function showInModal(data) {
        var modalBody = $('#form-modal .modal-body');
        var table = $('<table>').addClass('table table-bordered mt-1');
        var thead = $('<thead>').append('<tr><th>BOQ Pro.</th><th>Pro. Qty</th></tr>');
        var tbody = $('<tbody>');

        $.each(data, function (index, item) {
            var row = '<tr>' +
                '<td>' + item.boqproductname + '</td>' +
                '<td>' + item.boqqty + '</td>' +
                '</tr>';
            tbody.append(row);
        });

        table.append(thead).append(tbody);
        modalBody.empty().append(table);
        $('#form-modal').modal('show');
    }
 
    function showNoDataFoundModal() {
        var modalHeader = $('#form-modal .modal-header');
        var modalBody = $('#form-modal .modal-body');

        modalHeader.empty(); // Clear modal header content
        modalBody.empty(); // Clear modal body content

        // Add a custom heading
        // var heading = $('<h5>').addClass('modal-title').text('BOQ Details');
        var heading = $('<h5>').addClass('modal-title').text('BOQ Details');
        modalHeader.append(heading);

        // Add the message to the modal body
        modalBody.text("No BOQ Data found.").css({
            'color': 'Green',        // Set text color to green
            'font-weight': '600'     // Set font weight to 650
        });

        $('#form-modal').modal('show');
    }

    // Attach the click event to the edit buttons
    $(document).on('click', '.poedit-button', function () {
        var productCode = $(this).data('productcode');
        var sono = $(this).data('sono');
        var quantity = $(this).data('quantity');
        console.log(productCode + " - " + sono + " - " + quantity);
        // Call the function to show product details in the modal
        showProductDetails2(productCode, sono, quantity);
    });

    // Function to fetch and display product details in the modal
    function showProductDetails2(productCode, sono, quantity) {
        console.log(" data : " + productCode + sono + quantity);
        var editUrl = '/Outwards/_partialSubComponent?productCode=' + productCode + '&sono=' + sono + '&quantity=' + quantity;
        console.log(editUrl);
        showInPopup(editUrl, 'SubComponents Details');

    }
  
    $(document).on('click', '.addserial-button', function () {
        var productCode = $(this).data('productcode');
        var description = $(this).data('description');
        var warranty = $(this).data('warranty'); // Corrected attribute name
        // var quantity = $(this).data('quantity');
        var sono = $(this).data('sono');
        var quantity = $(this).closest('tr').find('.quantity-input').val();

        console.log(productCode + " - " + sono + " - " + quantity + " - " + warranty);
        // Call the function to show product details in the modal
        showProductDetails3(productCode, sono, quantity, warranty);
    });

    function showProductDetails3(productCode, sono, quantity, warranty) {
        console.log(" data : " + productCode + sono + quantity + warranty);
        var editUrl = '/Outwards/_partialAddSerialso?productCode=' + productCode + '&sono=' + sono + '&quantity=' + quantity + '&warranty=' + warranty;
        console.log(editUrl);
        showInPopupsoO(editUrl, 'Add Serial No.');
    }

    $(document).on('change', '.quantity-input', function () {
        console.log("Quantity Changed .....");
        var row = $(this).closest('tr');
        var quantity = parseFloat($(this).val());
        var sono = document.getElementById("sono").value;
        var changedInput = $(this);
        var inputField = changedInput;

        // Get the productcode value within this row
        var productCodeValue = row.find('input[name^="inwardPacket"][name$=".productcode"]').val();
        var subcomponent = row.find('input[name^="inwardPacket"][name$=".totalsubassmbly"]').val();

        console.log("quantity : " + quantity);
        console.log("productCodeValue : " + productCodeValue);
        console.log("sono : " + sono);
        
        // 1st ajax call
        $.ajax({
            url: '@Url.Action("checkquantityifgreter", "Outwards")',
            type: 'GET',
            dataType: 'json',
            data: { selectedvalue: productCodeValue, selectedvalue1: quantity, selectedvalue2: sono },
            success: function (response) {
                if (response === "QuantityGreterError") {
                    console.log('Quantity is greater than specified!');
                    Swal.fire({
                        icon: 'error',
                        title: 'Quantity Error!',
                        text: 'Quantity is greater than the specified quantity!',
                    });
                    inputField.val('');
                } else {

                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log('First AJAX Error:', textStatus);
            }
        });
        $.ajax({
            url: '@Url.Action("GetSumSubComponent", "Outwards")',
            type: 'GET',
            dataType: 'json',
            data: { selectedvalue: productCodeValue, selectedvalue1: quantity, selectedvalue2: sono },
            success: function (data) {

                console.log("Total : " + data);
                var subcomponent = row.find('input[name^="inwardPacket"][name$=".totalsubassmbly"]');
                console.log("totalsubassembly : " + subcomponent.val());
                if (subcomponent.length > 0) {
                    subcomponent.val(data);
                } else {
                    console.error('Subcomponent not found!');
                }
            }
        });

        // var tqtySum = 0;
    });


</script>
