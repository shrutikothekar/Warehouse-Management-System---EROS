@model List<eros.Models.MatchedData>
@{
    ViewData["Title"] = "VarianceReport";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string role = Context.Request.HttpContext.Session.GetString("Role");
    var jsonData = Context.Request.HttpContext.Session.GetString("MenuMaster");
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>

    @*  <!-- Include Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" />

    <!-- Include DataTables CSS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.2/css/jquery.dataTables.min.css" /> *@


    <!-- Add these scripts in the head section or just before the closing body tag -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>

    <!-- Include Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" />

    <!-- Include jsPDF library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>

    <!-- Include jsPDF-AutoTable plugin -->
    <script src="https://cdn.jsdelivr.net/npm/jspdf-autotable@3.5.13/dist/jspdf.plugin.autotable.min.js"></script>

    <!-- Include html2canvas library -->
    <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>

    <!-- Include SweetAlert library -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Include jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Include DataTables JavaScript -->
    <script src="https://cdn.datatables.net/1.11.2/js/jquery.dataTables.min.js"></script>
</head>
<body>
    <div class="mt-3">
        <div class="card mb-3">
            <div class="card-header bg-dark text-white">
                <div class="d-flex align-items-baseline">
                    <h5 class="mx-auto font-weight-bolder">Variance Report</h5>
                    <select onchange="boxprovariance()" class="btn btn-primary text-white mr-1 btn-sm">
                        <option value="boxes">Boxes wise variance</option>
                        <option value="product">Product wise variance</option>
                    </select>
                    <a asp-action="CheckPhysicalStock" class="btn btn-success text-white mr-1 btn-sm"><i class="fa fa-reply"></i>Back</a>
                    <a onclick="generatePDF()" class="btn btn-danger btn-sm text-white mr-1"><i class="fas fa-file-pdf"></i>Pdf</a>
                    <a onclick="exportToExcel()" id="exportButton" class="btn btn-success text-white btn-sm mr-1">
                        <i class="fas fa-file-excel"></i>
                        Excel
                    </a>
                    <a onclick="variancereportsave()" class="btn btn-success text-white btn-sm" id="hidebtn"><i class="fa-file-save"></i>Save</a>
                </div>
                <input type="hidden" id="tab" />
            </div>
            <div class="card-body" id="boxwise">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover" id="dataTable" width="100%" cellspacing="0">
                        <thead class="thead-light text-center">
                            <tr>
                                <th>
                                    PSTCode
                                </th>
                                <th>
                                    LocationCode
                                </th>
                                <th>
                                    ProductCode
                                </th>
                                <th>
                                    Box No.
                                </th>
                                <th>
                                    BatchCode
                                </th>
                                <th>
                                    PST Box Count
                                </th>
                                <th>
                                    System Box Count
                                </th>
                                <th>
                                    Box Variance
                                </th>
                                <th>
                                    Remark
                                </th>
                            </tr>
                        </thead>
                        <tbody id="allrow" class=" text-center">
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PhysicalStockItem.physicalid)
                                    </td>

                                    <td>
                                        @Html.DisplayFor(modelItem => item.PhysicalStockItem.locationcode)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PhysicalStockItem.productcode)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.boxno)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PhysicalStockItem.batchcode)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.pstcount)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.storagecount)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.stockvariance)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Remark)
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            @* ------- *@
            <div class="card-body" id="productwise" style="display:none">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover" id="dataTable1" width="100%" cellspacing="0">
                        <thead class="thead-light">
                            <tr>
                                <th>
                                    Details
                                </th>
                                <th>
                                    Physical Id
                                </th>
                                <th>
                                    Product Code
                                </th>
                                <th>
                                    PST Quantity
                                </th>
                                <th>
                                    Storage Quantity
                                </th>
                                <th>
                                    Stock Variance
                                </th>
                                <th>
                                    Remark
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
<!-- Modal -->
<div class="modal fade" id="detailModal" tabindex="-1" role="dialog" aria-labelledby="detailModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailModalLabel">Product Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p><strong>Product Code:</strong> <span id="modalProductCode"></span></p>
                <table class="table table-bordered table-hover" id="dataTable2" width="100%" cellspacing="0">
                    <thead class="thead-light">
                        <tr>
                            <th>
                                PST Boxes
                            </th>
                            <th>
                                PST Count
                            </th>
                            <th>
                                Storage Boxes
                            </th>
                            <th>
                                Storage Count
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jspdf-autotable@3.5.13/dist/jspdf.plugin.autotable.min.js"></script>
<script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.11.2/js/jquery.dataTables.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<script>
    function filterTable() {
        var category = $('#categoryFilter').val();
        var dataTable = $('#dataTable').DataTable();
        dataTable.column(3).search(category).draw();

        // Update serial numbers after filtering
        updateSerialNumbers();
    }
    function updateSerialNumbers() {
        $('#dataTable tbody tr').each(function (index) {
            $(this).find('td').eq(0).text(index + 1);
        });
    }

    function updateSerialNumbersproduct() {
        $('#dataTable1 tbody tr').each(function (index) {
            $(this).find('td').eq(0).text(index + 1);
        });
    }

    var jsPDF = window.jspdf.jsPDF;
    // function convertToPDF(columnNames, tableData) {

    //     var doc = new jsPDF();
    //     var currentDate = new Date();

    //     var additionalText = 'EROS GENERAL AGENCIES PVT LTD.';
    //     var pageWidth = doc.internal.pageSize.getWidth();
    //     var additionalTextX = pageWidth / 2;
    //     doc.setFontSize(14);
    //     doc.text(additionalText, additionalTextX, 10, { align: 'center' });

    //     var heading1 = 'Variance Report';
    //     var day = currentDate.getDate();
    //     var month = currentDate.getMonth() + 1; // Month is zero-based, so add 1
    //     var year = currentDate.getFullYear();
    //     var formattedDate = (day < 10 ? '0' : '') + day + '/' + (month < 10 ? '0' : '') + month + '/' + year; // Format date as dd/mm/yyyy
    //     var formattedTime = currentDate.toTimeString().slice(0, 8); // Format time
    //     var headingX = pageWidth / 2;
    //     doc.setFontSize(10);
    //     doc.text(heading1 + ' - Generated on: ' + formattedDate + ' ' + formattedTime, headingX, 19, { align: 'center' });

    //     var selectedColumns = [0, 1, 2, 3, 4, 5, 6, 7]; // Adjust based on the columns you want to include in the PDF

    //     var rows = tableData.map((row, index) => [index + 1].concat(selectedColumns.slice(1).map(column => (row[column] !== undefined) ? row[column].toString() : '')));

    //     doc.autoTable({
    //         head: [columnNames],
    //         body: rows,
    //         startY: 30, // Start below the date and time text
    //         styles: {
    //             fontSize: 8,
    //             cellPadding: 2,
    //             valign: 'middle',
    //             halign: 'left',
    //         },
    //         margin: { top: 15 },
    //     });

    //     try {
    //         doc.save('productreport_.pdf');
    //         console.log("Doc Generated Successfully!");
    //     } catch (error) {
    //         console.error('Error saving PDF:', error);
    //     }
    // }
    function convertToPDF(columnNames, tableData) {
        var doc = new jsPDF();
        var currentDate = new Date();

        var additionalText = 'EROS GENERAL AGENCIES PVT LTD.';
        var pageWidth = doc.internal.pageSize.getWidth();
        var additionalTextX = pageWidth / 2;
        doc.setFontSize(14);
        doc.text(additionalText, additionalTextX, 10, { align: 'center' });

        var heading1 = 'Variance Report';
        var day = currentDate.getDate();
        var month = currentDate.getMonth() + 1; // Month is zero-based, so add 1
        var year = currentDate.getFullYear();
        var formattedDate = (day < 10 ? '0' : '') + day + '/' + (month < 10 ? '0' : '') + month + '/' + year; // Format date as dd/mm/yyyy
        var formattedTime = currentDate.toTimeString().slice(0, 8); // Format time
        var headingX = pageWidth / 2;
        doc.setFontSize(10);
        doc.text(heading1 + ' - Generated on: ' + formattedDate + ' ' + formattedTime, headingX, 19, { align: 'center' });

        var selectedColumns = [0, 1, 2, 3, 4, 5, 6, 7,8]; // Adjust based on the columns you want to include in the PDF

        var rows = tableData.map((row, index) =>
            [index + 1].concat(selectedColumns.slice(1).map(column =>
                (row[column] !== undefined) ? row[column].toString() : '')
            )
        );

        doc.autoTable({
            head: [columnNames],
            body: rows,
            startY: 30, // Start below the date and time text
            styles: {
                fontSize: 8,
                cellPadding: 2,
                valign: 'middle',
                halign: 'left',
            },
            margin: { top: 15 },
            columnStyles: {
                0: { cellWidth: 10 },  // SR (Serial No.)
                1: { cellWidth: 20 },  // Location (reduced width)
                2: { cellWidth: 50 },  // Product Code (increased width)
                3: { cellWidth: 25 },  // Batch
                4: { cellWidth: 15 },  // PST Qty
                5: { cellWidth: 15 },  // SYS Qty
                6: { cellWidth: 15 },  // Stock Variance
                7: { cellWidth: 10 },   // Remark
                8: { cellWidth: 30 },   // Remark
            }
        });

        try {
            doc.save('productreport_.pdf');
            console.log("Doc Generated Successfully!");
        } catch (error) {
            console.error('Error saving PDF:', error);
        }
    }


    function convertToPDFproduct(columnNames, tableData1) {
        var doc = new jsPDF();
        var currentDate = new Date();

        var additionalText = 'EROS GENERAL AGENCIES PVT LTD.';
        var pageWidth = doc.internal.pageSize.getWidth();
        var additionalTextX = pageWidth / 2;
        doc.setFontSize(14);
        doc.text(additionalText, additionalTextX, 10, { align: 'center' });

        var heading1 = 'Variance Report';
        var day = currentDate.getDate();
        var month = currentDate.getMonth() + 1; // Month is zero-based, so add 1
        var year = currentDate.getFullYear();
        var formattedDate = (day < 10 ? '0' : '') + day + '/' + (month < 10 ? '0' : '') + month + '/' + year; // Format date as dd/mm/yyyy
        var formattedTime = currentDate.toTimeString().slice(0, 8); // Format time
        var headingX = pageWidth / 2;
        doc.setFontSize(10);
        doc.text(heading1 + ' - Generated on: ' + formattedDate + ' ' + formattedTime, headingX, 19, { align: 'center' });

        var selectedColumns = [0, 1, 2, 3, 4, 5, 6]; // Adjust based on the columns you want to include in the PDF

        var rows = tableData1.map((row, index) =>
            [index + 1].concat(selectedColumns.slice(1).map(column =>
                (row[column] !== undefined) ? row[column].toString() : '')
            )
        );

        doc.autoTable({
            head: [columnNames],
            body: rows,
            startY: 30, // Start below the date and time text
            styles: {
                fontSize: 8,
                cellPadding: 2,
                valign: 'middle',
                halign: 'left',
            },
            margin: { top: 15 },
            columnStyles: {
                0: { cellWidth: 10 },  // SR (Serial No.)
                1: { cellWidth: 20 },  // Location (reduced width)
                2: { cellWidth: 50 },  // Product Code (increased width)
                3: { cellWidth: 25 },  // Batch
                4: { cellWidth: 15 },  // PST Qty
                5: { cellWidth: 15 },  // SYS Qty
                6: { cellWidth: 15 },  // Stock Variance
            }
        });

        try {
            doc.save('productreport_.pdf');
            console.log("Doc Generated Successfully!");
        } catch (error) {
            console.error('Error saving PDF:', error);
        }
    }

    function generatePDF() {
        var selectedOption = document.querySelector('select').value; // Get selected value from the dropdown
        if (selectedOption.toUpperCase() == "PRODUCT") {
            var columnNames = ['SR', 'Physical Id', 'Pro.Code.', 'PST.Qty', 'SYS.Qty', 'Stock Var.', 'Remark'];

            // Get filtered data from DataTable
            var dataTable1 = $('#dataTable1').DataTable();

            // Update serial numbers before exporting to PDF
            updateSerialNumbersproduct();

            var tableData1 = dataTable1.rows({ search: 'applied' }).data().toArray(); // Get only filtered rows

            convertToPDFproduct(columnNames, tableData1);
        }
        else {
            var columnNames = ['SR', 'Location', 'Pro.Code.', 'Box No.', 'Batch', 'PST.Qty', 'SYS.Qty', 'Stock Var.', 'Remark'];

            // Get filtered data from DataTable
            var dataTable = $('#dataTable').DataTable();

            // Update serial numbers before exporting to PDF
            updateSerialNumbers();

            var tableData = dataTable.rows({ search: 'applied' }).data().toArray(); // Get only filtered rows

            convertToPDF(columnNames, tableData);
        }
    }
    function exportToExcel() {
        function formatDate(date) {
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }
        const now = new Date();
        const formattedDate = formatDate(now);
        const formattedTime = now.toLocaleTimeString();
        const sheetHeading = ['EROS GENERAL AGENCIES PVT. LTD.'];
        const subHeading = ['Excel generated on ' + formattedDate + ' at ' + formattedTime];

        var selectedOption = document.querySelector('select').value; // Get selected value from the dropdown


        // Proceed based on the selected option
        if (selectedOption.toUpperCase() == "PRODUCT") {
            // Code for exporting boxes wise variance
            console.log("Exporting Boxes Wise Variance");
            const workbook1 = new ExcelJS.Workbook();
            const tableHeading1 = ['SR', 'Pro.Code.', 'PST Quantity.', 'SYS Quantity.', 'Stock Variance', 'Remark'];
            const wsData1 = [sheetHeading, subHeading, tableHeading1];
            function collectprodAllPages() {
                const dataTable1 = $('#dataTable1').DataTable();
                const pageCount1 = dataTable1.page.info().pages;

                // Initialize serial number counter
                let serialNumber = 1;

                for (let i = 0; i < pageCount1; i++) {
                    dataTable1.page(i).draw('page');

                    $('#dataTable1 tbody tr').each(function () {
                        const rowData1 = [];

                        // Set serial number for the current row
                        $(this).find('td').eq(0).text(serialNumber);
                        serialNumber++; // Increment serial number

                        $(this).find('td').each(function () {
                            rowData1.push($(this).text().trim());
                        });
                        wsData1.push(rowData1);
                    });
                }
                // Reset DataTable to the first page
                dataTable1.page(0).draw('page');
            }
            collectprodAllPages();

            const worksheet1 = workbook1.addWorksheet('Order Sheet');
            const borderStyle = {
                top: { style: 'thin' },
                left: { style: 'thin' },
                bottom: { style: 'thin' },
                right: { style: 'thin' }
            };

            const headingRow = worksheet1.addRow(sheetHeading);
            headingRow.font = { bold: true, size: 14 };
            worksheet1.mergeCells('A1:F1');
            headingRow.alignment = { horizontal: 'center', vertical: 'center' };
            headingRow.eachCell((cell) => {
                cell.border = borderStyle;
            });

            const subHeadingRow = worksheet1.addRow(subHeading);
            worksheet1.mergeCells('A2:F2');
            subHeadingRow.font = { size: 10 };
            subHeadingRow.alignment = { horizontal: 'center', vertical: 'center' };
            subHeadingRow.eachCell((cell) => {
                cell.border = borderStyle;
            });

            const headerRow1 = worksheet1.addRow(tableHeading1);
            headerRow1.eachCell((cell) => {
                cell.font = { bold: true, size: 12 };
                cell.alignment = { horizontal: 'center', vertical: 'center' };
                cell.border = borderStyle;
            });

            wsData1.slice(3).forEach(dataRow => {
                const row1 = worksheet1.addRow(dataRow);
                row1.eachCell((cell, colNumber) => {
                    if (colNumber === 2) {
                        cell.alignment = { horizontal: 'left', vertical: 'top', wrapText: true };
                    } else {
                        cell.alignment = { horizontal: 'center', vertical: 'center' };
                    }
                    cell.border = borderStyle;
                });
            });

            worksheet1.columns = [
                { width: 5 },
                { width: 15 },
                { width: 14 },
                { width: 14 },
                { width: 15 },
                { width: 18 },
            ];

            workbook1.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Instock_Productwise_Sheet.xlsx');
            });


        } else if (selectedOption.toUpperCase() === "BOXES") {
            const workbook = new ExcelJS.Workbook();
            const tableHeading = ['SR', 'Location', 'Pro.Code.', 'Box No.', 'Batch', 'PST.Qty', 'SYS.Qty', 'Stock Var.', 'Remark'];
            const wsData = [sheetHeading, subHeading, tableHeading];

            // Function to collect data from all pages of DataTable
            function collectDataFromAllPages() {
                const dataTable = $('#dataTable').DataTable();
                const pageCount = dataTable.page.info().pages;

                // Initialize serial number counter
                let serialNumber = 1;

                for (let i = 0; i < pageCount; i++) {
                    dataTable.page(i).draw('page');

                    $('#dataTable tbody tr').each(function () {
                        const rowData = [];

                        // Set serial number for the current row
                        $(this).find('td').eq(0).text(serialNumber);
                        serialNumber++; // Increment serial number

                        $(this).find('td').each(function () {
                            rowData.push($(this).text().trim());
                        });
                        wsData.push(rowData);
                    });
                }
                // Reset DataTable to the first page
                dataTable.page(0).draw('page');
            }

            collectDataFromAllPages();


            const worksheet = workbook.addWorksheet('Order Sheet');

            const borderStyle = {
                top: { style: 'thin' },
                left: { style: 'thin' },
                bottom: { style: 'thin' },
                right: { style: 'thin' }
            };

            const headingRow = worksheet.addRow(sheetHeading);
            headingRow.font = { bold: true, size: 14 };
            worksheet.mergeCells('A1:I1');
            headingRow.alignment = { horizontal: 'center', vertical: 'center' };
            headingRow.eachCell((cell) => {
                cell.border = borderStyle;
            });

            const subHeadingRow = worksheet.addRow(subHeading);
            worksheet.mergeCells('A2:I2');
            subHeadingRow.font = { size: 10 };
            subHeadingRow.alignment = { horizontal: 'center', vertical: 'center' };
            subHeadingRow.eachCell((cell) => {
                cell.border = borderStyle;
            });

            const headerRow = worksheet.addRow(tableHeading);
            headerRow.eachCell((cell) => {
                cell.font = { bold: true, size: 12 };
                cell.alignment = { horizontal: 'center', vertical: 'center' };
                cell.border = borderStyle;
            });

            wsData.slice(3).forEach(dataRow => {
                const row = worksheet.addRow(dataRow);
                row.eachCell((cell, colNumber) => {
                    if (colNumber === 2 || colNumber === 3) {
                        cell.alignment = { horizontal: 'left', vertical: 'top', wrapText: true };
                    } else {
                        cell.alignment = { horizontal: 'center', vertical: 'center' };
                    }
                    cell.border = borderStyle;
                });
            });

            worksheet.columns = [
                { width: 10 },
                { width: 10 },
                { width: 35 },
                { width: 20 },
                { width: 15 },
                { width: 15 },
                { width: 15 },
                { width: 30 },
                { width: 35 },
            ];

            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Instock_Boxeswise_Sheet.xlsx');
            });

        }

    }
</script>

<script>
    // var jsPDF = window.jspdf.jsPDF;
    // function convertToPDF(columnNames) {
    //     var doc = new jsPDF();
    //     var dataTable = $('#dataTable').DataTable();
    //     var selectedColumns = ['0', '1', '2', '3', '4', '5', '6', '7'];
    //     var processedPages = [];
    //     function addPageToPDF(pageNumber) {
    //         dataTable.page(pageNumber).draw('page');
    //         var tableData = dataTable.rows().data().toArray();
    //         var columns = selectedColumns; // Use only the selected columns
    //         var rows = tableData.map(row => selectedColumns.map(column => (row[column] !== undefined) ? row[column].toString() : ''));
    //         doc.autoTable({
    //             head: [columnNames],
    //             body: rows,
    //             startY: 10,
    //             styles: {
    //                 fontSize: 10,
    //                 cellPadding: 2,
    //                 valign: 'middle',
    //                 halign: 'left',
    //             },
    //             margin: { top: 20 },
    //         });
    //         if (pageNumber < dataTable.page.info().pages - 1) {
    //             doc.addPage();
    //             addPageToPDF(pageNumber + 1);
    //         } else {
    //             doc.save('variancereport.pdf');
    //             Swal.fire({
    //                 icon: 'success',
    //                 title: 'Done Successfully!',
    //                 showConfirmButton: false,
    //                 timer: 1500
    //             });
    //         }
    //     }
    //     addPageToPDF(0);
    // }
    // function generatePDF() {
    //     var customHeader = 'Custom PDF Header';
    //     var columnNames = ['PSTcode', 'Loc', 'Product', 'B.Code', 'PST Qty', 'Store Qty', 'Stock Var.', 'Remark'];
    //     convertToPDF(columnNames);
    // }
    // function exportToExcel() {
    //     var table = document.getElementById("dataTable");
    //     var data = XLSX.utils.table_to_sheet(table);
    //     var wb = XLSX.utils.book_new();
    //     XLSX.utils.book_append_sheet(wb, data, "Sheet1");
    //     XLSX.writeFile(wb, "output.xlsx");
    // }
    // document.getElementById("exportBtn").addEventListener("click", exportToExcel);


</script>
<script>
    function variancereportsave() {
        var selectedOption = document.querySelector('select').value;
        var tableData = [];
        console.log(selectedOption);
        if (selectedOption.toUpperCase() == "PRODUCT") {
            var table = $('#dataTable1').DataTable();
            table.rows().every(function (rowIdx, tableLoop, rowLoop) {
                var data = this.data(); // Get data for the current row
                var rowData = {
                    physicalid: data[1], // assuming physicalid is the first column
                    productcode: data[2],
                    pstcount: data[3],
                    storagecount: data[4],
                    stockvariance: data[5],
                    remark: data[6],
                };
                tableData.push(rowData);
            });
        }
        else {
            var table = $('#dataTable').DataTable();
            table.rows().every(function (rowIdx, tableLoop, rowLoop) {
                var data = this.data(); // Get data for the current row
                var rowData = {
                    physicalid: data[0], // assuming physicalid is the first column
                    locationcode: data[1],
                    productcode: data[2],
                    boxno: data[3],
                    batchcode: data[4],
                    pstcount: data[5],
                    storagecount: data[6],
                    stockvariance: data[7],
                    Remark: data[8],
                };
                tableData.push(rowData);
            });
        }

        console.log(tableData);
        var tableDataJson = JSON.stringify(tableData);
        console.log(tableDataJson);
        document.getElementById("tab").value = tableDataJson;
        $.ajax({
            url: '/PhysicalStockTake/SaveVariance',
            type: 'POST',
            data: { tableDataJson: tableDataJson, selectedvalue: selectedOption },
            success: function (response) {
                if (response.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Data Saved Successfully!'
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Data Already Saved!'
                    });
                }
            },
            error: function (xhr, status, error) {
                console.error('Error saving data:', error);
            }
        });

    }
    // $("#dataTable tbody tr").each(function () {
    //     var row = $(this);
    //     // if (row.find("TD").eq(0).html() != null) {

    //     var rowData = {
    //         physicalid: row.find("TD").eq(0).html(),
    //         locationcode: row.find("TD").eq(1).html(),
    //         productcode: row.find("TD").eq(2).html(),
    //         batchcode: row.find("TD").eq(3).html(),
    //         pstcount: row.find("TD").eq(4).html(),
    //         storagecount: row.find("TD").eq(5).html(),
    //         stockvariance: row.find("TD").eq(6).html(),
    //         Remark: row.find("TD").eq(7).html(),
    //     };
    //     tableData.push(rowData);
    //     // }
    // });

    // var tableDataJson = JSON.stringify(tableData);
    // console.log(tableDataJson);
    // document.getElementById("tab").value = tableDataJson;
    // $.ajax({
    //     url: '/PhysicalStockTake/SaveVariance',
    //     type: 'POST',
    //     data: { tableDataJson: tableDataJson },
    //     success: function (response) {
    //         if (response.success) {
    //             Swal.fire({
    //                 icon: 'success',
    //                 title: 'Success',
    //                 text: 'Data Saved Successfully!'
    //             });
    //         } else {
    //             Swal.fire({
    //                 icon: 'error',
    //                 title: 'Error',
    //                 text: 'Data Already Saved!'
    //             });
    //         }
    //     },
    //     error: function (xhr, status, error) {
    //         console.error('Error saving data:', error);
    //     }
    // });

</script>

<script>
    function boxprovariance() {
        var selectedOption = document.querySelector('select').value;
        console.log("Selected option:", selectedOption);
        if (selectedOption.toUpperCase() == "PRODUCT") {
            $.ajax({
                url: '/PhysicalStockTake/OverAllProduct',
                type: 'POST',
                success: function (allResult) {
                    if (allResult) {
                        console.log(allResult);
                        $('#dataTable1 tbody').empty();

                        // // Iterate over the comparisonresult and create table rows
                        $.each(allResult, function (index, item) {
                            // Create a new table row
                            var newRow = $('<tr></tr>');
                            var viewDetailsLink = $('<a></a>')
                                .attr('href', '#')
                                .addClass('open-modal')
                                .attr('data-toggle', 'modal')
                                .attr('data-target', '#detailModal')
                                .attr('data-productcode', item.productCode)  // Add data attributes from your comparisonresult object
                                .attr('data-pstquantity', item.physicalStockMinTotalCount)
                                .attr('data-storagequantity', item.storageMinTotalCount)
                                .attr('data-remark', item.remark)
                                .text('View Details');

                            // Create table cells and append data
                            newRow.append($('<td></td>').append(viewDetailsLink));
                            newRow.append($('<td></td>').text(item.physicalid));
                            newRow.append($('<td></td>').text(item.productCode));
                            newRow.append($('<td></td>').text(item.physicalStockMinTotalCount));
                            newRow.append($('<td></td>').text(item.storageMinTotalCount));
                            newRow.append($('<td></td>').text(item.stockVariance));
                            newRow.append($('<td></td>').text(item.remark));
                            // Append the new row to the table body
                            $('#dataTable1 tbody').append(newRow);
                        });
                        $('#productwise').show();
                        $('#boxwise').hide();
                        //$('#hidebtn').hide();

                        // Initialize DataTables
                        $('#dataTable1').DataTable();


                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Data Already Saved!'
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error saving data:', error);
                }
            });
        }
        else {

            $.ajax({
                url: '/PhysicalStockTake/VarianceReporttt',
                type: 'POST',
                success: function (matchedDataWithRemarks) {
                    if (matchedDataWithRemarks) {
                        console.log(matchedDataWithRemarks);
                        $('#dataTable tbody').empty();

                        // // Iterate over the comparisonresult and create table rows
                        $.each(matchedDataWithRemarks, function (index, item) {
                            // Create a new table row
                            var newRow = $('<tr></tr>');
                            // Create table cells and append data
                            newRow.append($('<td></td>').text(item.physicalStockItem.physicalid));
                            newRow.append($('<td></td>').text(item.physicalStockItem.locationcode));
                            newRow.append($('<td></td>').text(item.physicalStockItem.productcode));
                            newRow.append($('<td></td>').text(item.physicalStockItem.boxes));
                            newRow.append($('<td></td>').text(item.physicalStockItem.batchcode));
                            newRow.append($('<td></td>').text(item.pstcount));
                            newRow.append($('<td></td>').text(item.storagecount));
                            newRow.append($('<td></td>').text(item.stockvariance));
                            newRow.append($('<td></td>').text(item.remark));
                            // Append the new row to the table body
                            $('#dataTable tbody').append(newRow);
                        });
                        $('#boxwise').show();
                        $('#productwise').hide();
                       // $('#hidebtn').show();
                        $('#dataTable').DataTable();


                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Data Already Saved!'
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error saving data:', error);
                }
            });


        }
    }
</script>


<script>
    $(document).on('click', '.open-modal', function (event) {
        event.preventDefault(); // Prevent the default action of the link

        // Retrieve data attributes from the clicked link
        var productCode = $(this).data('productcode');


        $.ajax({
            url: '/PhysicalStockTake/detailsummary',
            type: 'POST',
            data: { productCode: productCode },
            success: function (allResult) {

                //console.log(comparisonresult);
                // Clear previous rows (if needed)
                $('#dataTable2 tbody').empty();

                // Iterate over the comparisonresult and create table rows
                $.each(allResult, function (index, item) {
                    // Create a new table row
                    var newRow = $('<tr></tr>');

                    // Create table cells and append data
                    newRow.append($('<td></td>').text(item.pstboxes));
                    newRow.append($('<td></td>').text(item.pstcount));
                    newRow.append($('<td></td>').text(item.storageboxes));
                    newRow.append($('<td></td>').text(item.storagecount));
                    // Append the new row to the table body
                    $('#dataTable2 tbody').append(newRow);
                });

            },
            error: function (xhr, status, error) {
                console.error('Error saving data:', error);
            }
        });

        // Populate the modal fields
        $('#modalProductCode').text(productCode);

    });

</script>
