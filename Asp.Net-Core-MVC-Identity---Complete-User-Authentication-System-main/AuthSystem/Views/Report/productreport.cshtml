@model List<eros.Models.InStockQty>
@{
    ViewData["Title"] = "Current Quantity";

    // Sort the Model list by product code in ascending order
    Model.Sort((x, y) => string.Compare(x.productcode, y.productcode));
    // string role = ViewBag.roles;
    string role = Context.Request.HttpContext.Session.GetString("Role");
    var jsonData = Context.Request.HttpContext.Session.GetString("MenuMaster");
}
@{
    ViewData["Title"] = "Current Quantity";
    Model.Sort((x, y) => y.currentqty.CompareTo(x.currentqty));
}

<style>
    label {
        font-size: small; /* You can also use specific values like 10px or 0.8em */
        font-weight: 700;
    }

    .small-heading {
        font-size: 1rem; /* Adjust the font size as needed */
    }
</style>

<style>
    #spinner {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000; /* Ensure it's above other content */
        background-color: rgba(255, 255, 255, 0.8);
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        text-align: center;
    }
</style>

@if (!string.IsNullOrEmpty(role))
{
    @if (role == "ADMIN" || role == "WAREHOUSE")
    {
        <div id="spinner" style="display: none;">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p class="mt-2">Generating PDF...</p>
        </div>

        <div class="container-field">
            <div class="mt-3">
                <div class="card mb-3">
                    <div class="card-header bg-dark text-white">
                        <div class="d-flex align-items-baseline">
                            <h5 class="mx-auto font-weight-bolder small-heading">Product Stock Report</h5>


                            <a onclick="generatePDF()" class="btn btn-danger btn-sm text-white mr-1"><i class="fas fa-file-pdf"></i>Pdf</a>
                            <a onclick="exportToExcel()" id="exportButton" class="btn btn-success text-white btn-sm mr-1">
                                <i class="fas fa-file-excel"></i>
                                Excel
                            </a>
                            <a onclick="printContent()" class="btn btn-primary btn-sm text-white mr-1">
                                <i class="fas fa-print"></i> Print
                            </a>
                            <a asp-action="Index" asp-controller="Home" class="btn btn-success btn-sm text-white mr-1">
                                <i class="fa fa-reply"></i> Back
                            </a>
                        </div>
                    </div>
                    <div class=" mt-4">
                        <div class="row mx-lg-2 mx-md-2">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="categoryFilter">Select Category</label>
                                    <select id="categoryFilter" class="form-control form-select-sm" onchange="filterTable()">
                                        <option value="">All</option>
                                        @{
                                            var categories = Model.Select(m => m.category).Distinct().ToList();
                                            foreach (var category in categories)
                                            {
                                                <option value="@category">@category</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="table-responsive col-md-12 p-0">
                                    <table class="table table-striped table-sm" id="dataTable">
                                        <thead class="bg-gray-200 sticky top-0">
                                            <tr class="small">
                                                <th>No.</th>
                                                <th>Pro.Code</th>
                                                <th>Pro.Name</th>
                                                <th>Category</th>
                                                <th>Curr.Stock</th>
                                                <th>Allot.Stock</th>
                                            </tr>
                                        </thead>
                                        <tbody class="small">
                                            @{
                                                int counter = 1;
                                            }
                                            @foreach (var quantity in Model)
                                            {
                                                <tr>
                                                    <td>
                                                        @counter
                                                    </td>
                                                    <td style="width:250px;">@quantity.productcode</td>
                                                    <td>@quantity.productname</td>
                                                    <td>@quantity.category</td>
                                                    <td>@quantity.currentqty</td>
                                                    <td>@quantity.stcokallocate</td>
                                                </tr>
                                                counter++;
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    }
    else if (role == "HOSITE")
    {
        <div class="container">
            <div class="alert alert-danger alert-dismissible fade show">
                <h6 class="alert-heading">
                    <i class="bi-exclamation-octagon-fill"></i>
                    No Access !!
                </h6>
                <p>
                    You do not have access to this page. Please contact your administrator for assistance.
                </p>
                <hr>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        </div>
    }
    else
    {
        <div class="container">
            <div class="alert alert-danger alert-dismissible fade show">
                <h6 class="alert-heading">
                    <i class="bi-exclamation-octagon-fill"></i>
                    No Access !!
                </h6>
                <p>
                    You do not have access to this page. Please contact your administrator for assistance.
                </p>
                <hr>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        </div>
    }
}



<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jspdf-autotable@3.5.13/dist/jspdf.plugin.autotable.min.js"></script>
<script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.11.2/js/jquery.dataTables.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<script>
    function filterTable() {
        var category = $('#categoryFilter').val();
        var dataTable = $('#dataTable').DataTable();
        dataTable.column(3).search(category).draw();

        // Update serial numbers after filtering
        updateSerialNumbers();
    }
    function updateSerialNumbers() {
        $('#dataTable tbody tr').each(function (index) {
            $(this).find('td').eq(0).text(index + 1);
        });
    }
    function printContent() {
        const printArea = document.querySelector('.container-field').innerHTML;
        const originalContent = document.body.innerHTML;

        document.body.innerHTML = printArea;
        window.print();
        document.body.innerHTML = originalContent;
        location.reload();
    }
    var jsPDF = window.jspdf.jsPDF;
    // function convertToPDF(columnNames, tableData) {

    //     var doc = new jsPDF();
    //     var currentDate = new Date();


    //     var additionalText = 'EROS GENERAL AGENCIES PVT LTD.';
    //     var pageWidth = doc.internal.pageSize.getWidth();
    //     var additionalTextX = pageWidth / 2;
    //     doc.setFontSize(14);
    //     doc.text(additionalText, additionalTextX, 10, { align: 'center' });

    //     var heading1 = 'Product Report';
    //     var day = currentDate.getDate();
    //     var month = currentDate.getMonth() + 1; // Month is zero-based, so add 1
    //     var year = currentDate.getFullYear();
    //     var formattedDate = (day < 10 ? '0' : '') + day + '/' + (month < 10 ? '0' : '') + month + '/' + year; // Format date as dd/mm/yyyy
    //     var formattedTime = currentDate.toTimeString().slice(0, 8); // Format time
    //     var headingX = pageWidth / 2;
    //     doc.setFontSize(10);
    //     doc.text(heading1 + ' - Generated on: ' + formattedDate + ' ' + formattedTime, headingX, 16, { align: 'center' });

    //     var selectedColumns = [0, 1, 2, 3, 4, 5]; // Adjust based on the columns you want to include in the PDF

    //     var rows = tableData.map((row, index) => [index + 1].concat(selectedColumns.slice(1).map(column => (row[column] !== undefined) ? row[column].toString() : '')));

    //     doc.autoTable({
    //         head: [columnNames],
    //         body: rows,
    //         startY: 30, // Start below the date and time text
    //         styles: {
    //             fontSize: 8,
    //             cellPadding: 2,
    //             valign: 'middle',
    //             halign: 'left',
    //         },
    //         margin: { top: 15 },
    //     });

    //     try {
    //         doc.save('productreport_.pdf');
    //         console.log("Doc Generated Successfully!");
    //     } catch (error) {
    //         console.error('Error saving PDF:', error);
    //     }
    // }
    function convertToPDF(columnNames, tableData) {
        var doc = new jsPDF();
        var currentDate = new Date();

        // Convert the image dynamically to base64
        var imgElement = new Image();
        imgElement.src = '/img/logo1.png'; // Use the relative path for your image
        imgElement.onload = function () {
            var canvas = document.createElement("canvas");
            canvas.width = imgElement.width;
            canvas.height = imgElement.height;
            var ctx = canvas.getContext("2d");
            ctx.drawImage(imgElement, 0, 0);
            var logoBase64 = canvas.toDataURL("image/png"); // Convert the image to base64

            var logoWidth = 18;  // Set the desired width
            var logoHeight = 15; // Set the desired height
            var pageWidth = doc.internal.pageSize.getWidth(); // Get page width

            // Calculate X position to center the logo
            var logoX = (pageWidth - logoWidth) / 2;

            // Insert logo at the top center
            doc.addImage(logoBase64, 'PNG', logoX, 5, logoWidth, logoHeight);

            // Add company name below the logo
            var additionalText = 'EROS GENERAL AGENCIES PVT LTD.';
            var additionalTextX = pageWidth / 2;

            doc.setFontSize(14);
            doc.text(additionalText, additionalTextX, 25, { align: 'center' }); // Adjust Y position to avoid overlapping with the logo

            // Add report heading and date/time below the company name
            var heading1 = 'Product Report';
            var day = currentDate.getDate();
            var month = currentDate.getMonth() + 1;
            var year = currentDate.getFullYear();
            var formattedDate = (day < 10 ? '0' : '') + day + '/' + (month < 10 ? '0' : '') + month + '/' + year; // Format date as dd/mm/yyyy
            var formattedTime = currentDate.toTimeString().slice(0, 8); // Format time as HH:MM:SS
            var headingX = pageWidth / 2;

            doc.setFontSize(10);
            doc.text(heading1 + ' - Generated on: ' + formattedDate + ' ' + formattedTime, headingX, 32, { align: 'center' }); // Adjust Y position below the title

            // Prepare table content
            var selectedColumns = [0, 1, 2, 3, 4, 5];
            var rows = tableData.map((row, index) => [index + 1].concat(selectedColumns.slice(1).map(column => (row[column] !== undefined) ? row[column].toString() : '')));

            // Create table below the header
            doc.autoTable({
                head: [columnNames],
                body: rows,
                startY: 40, // Start below the heading and date
                styles: {
                    fontSize: 8,
                    cellPadding: 2,
                    valign: 'middle',
                    halign: 'left',
                },
                margin: { top: 15 },
            });

            try {
                doc.save('productreport_.pdf');
                console.log("Doc Generated Successfully!");
            } catch (error) {
                console.error('Error saving PDF:', error);
            }
        }
    }

    function generatePDF() {
        var columnNames = ['Sr.No', 'Pro.Code', 'Description.', 'Category', 'Stk Qty', 'Allot Qty'];

        // Get filtered data from DataTable
        var dataTable = $('#dataTable').DataTable();

        // Update serial numbers before exporting to PDF
        updateSerialNumbers();

        var tableData = dataTable.rows({ search: 'applied' }).data().toArray(); // Get only filtered rows

        convertToPDF(columnNames, tableData);
    }
    function exportToExcel() {
        function formatDate(date) {
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }

        const now = new Date();
        const formattedDate = formatDate(now);
        const formattedTime = now.toLocaleTimeString();
        const sheetHeading = ['EROS GENERAL AGENCIES PVT. LTD.'];
        const subHeading = ['Excel generated on ' + formattedDate + ' at ' + formattedTime];
        const tableHeading = ['Sr.No', 'Pro.Code', 'Description.', 'Category', 'Stk Qty', 'Allot Qty'];

        const wsData = [sheetHeading, subHeading, tableHeading];

        // Function to collect data from all pages of DataTable
        function collectDataFromAllPages() {
            const dataTable = $('#dataTable').DataTable();
            const pageCount = dataTable.page.info().pages;

            // Initialize serial number counter
            let serialNumber = 1;

            for (let i = 0; i < pageCount; i++) {
                dataTable.page(i).draw('page');

                $('#dataTable tbody tr').each(function () {
                    const rowData = [];

                    // Set serial number for the current row
                    $(this).find('td').eq(0).text(serialNumber);
                    serialNumber++; // Increment serial number

                    $(this).find('td').each(function () {
                        rowData.push($(this).text().trim());
                    });
                    wsData.push(rowData);
                });
            }
            // Reset DataTable to the first page
            dataTable.page(0).draw('page');
        }

        collectDataFromAllPages();

        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Order Sheet');

        const borderStyle = {
            top: { style: 'thin' },
            left: { style: 'thin' },
            bottom: { style: 'thin' },
            right: { style: 'thin' }
        };

        const headingRow = worksheet.addRow(sheetHeading);
        headingRow.font = { bold: true, size: 14 };
        worksheet.mergeCells('A1:F1');
        headingRow.alignment = { horizontal: 'center', vertical: 'center' };
        headingRow.eachCell((cell) => {
            cell.border = borderStyle;
        });

        const subHeadingRow = worksheet.addRow(subHeading);
        worksheet.mergeCells('A2:F2');
        subHeadingRow.font = { size: 10 };
        subHeadingRow.alignment = { horizontal: 'center', vertical: 'center' };
        subHeadingRow.eachCell((cell) => {
            cell.border = borderStyle;
        });

        const headerRow = worksheet.addRow(tableHeading);
        headerRow.eachCell((cell) => {
            cell.font = { bold: true, size: 12 };
            cell.alignment = { horizontal: 'center', vertical: 'center' };
            cell.border = borderStyle;
        });

        wsData.slice(3).forEach(dataRow => {
            const row = worksheet.addRow(dataRow);
            row.eachCell((cell, colNumber) => {
                if (colNumber === 2 || colNumber === 3 ) {
                    cell.alignment = { horizontal: 'left', vertical: 'top', wrapText: true };
                } else {
                    cell.alignment = { horizontal: 'center', vertical: 'center' };
                }
                cell.border = borderStyle;
            });
        });

        worksheet.columns = [
            { width: 10 },
            { width: 30 },
            { width: 40 },
            { width: 20 },
            { width: 15 },
            { width: 15 }
        ];

        workbook.xlsx.writeBuffer().then(function (buffer) {
            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Instock_Product_Sheet.xlsx');
        });
    }
</script>


