@model IEnumerable<eros.Models.Storage_Operation>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string role = Context.Request.HttpContext.Session.GetString("Role");
    var jsonData = Context.Request.HttpContext.Session.GetString("MenuMaster");
}
<style>
    .damaged-button {
        background-color: red;
        color: white;
    }

    .small-heading {
        font-size: 1rem; /* Adjust the font size as needed */
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }
</style>
<div id="loadingIndicator" class="loading-indicator">
    <div class="spinner"></div>
</div>
@if (!string.IsNullOrEmpty(role))
{
    @if (role == "WAREHOUSE" || role == "HOSITE" || role == "ADMIN")
    {
        <div class="mt-3">
            <div class="card mb-3">
                <div class="card-header bg-dark text-white">
                    <div class="d-flex align-items-baseline">
                        <h5 class="mx-auto font-weight-bolder small-heading"> Location Wise Storage </h5>
                        <a style="display:none" asp-action="Create" style="margin:2px;" class="btn btn-success text-white btn-sm">
                            <i class="fas fa-plus-square"></i><span style="margin-left: 5px;">Add</span>
                        </a>
                        <a style="display:none" asp-action="CreateStockMovement" style="margin:2px;" class="btn btn-info text-white btn-sm">
                            <i class="fas fa-exchange-alt"></i>
                            <span style="margin-left: 5px;">Internal Stock Movement</span>
                        </a>
                        <a asp-action="Damage" style="margin:2px;" class="btn btn-warning text-white btn-sm mr-1">
                            <i class="fas fa-exclamation-triangle"></i><span style="margin-left: 5px;">Damage Products</span>
                        </a>
                        <a onclick="generatePDF()" class="btn btn-danger btn-sm text-white mr-1"><i class="fas fa-file-pdf"></i>Pdf</a>
                        <a onclick="exportToExcel()" id="exportButton" class="btn btn-success text-white btn-sm mr-1">
                            <i class="fas fa-file-excel"></i>
                            Excel
                        </a>
                         <a asp-action="Index" asp-controller="Home" class="btn btn-success btn-sm text-white mr-1">
                            <i class="fa fa-reply"></i> Back
                        </a>
                    </div>
                </div>
                <div class="card-body">
                 @*    <div class="table-responsive col-md-12 p-0" style="max-height: 600px; overflow-y: auto;">
                        <table class="table table-bordered table-hover" id="dataTable" width="100%" cellspacing="0">
                            <thead class="thead-light  sticky-top"> *@
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover" id="dataTable" width="100%" cellspacing="0">
                            <thead class="thead-light text-center">
                                <tr>
                                    <th>
                                        @* @Html.DisplayNameFor(model => model.productcode) *@
                                        Product Code
                                    </th>
                                    <th>
                                        @* @Html.DisplayNameFor(model => model.boxno) *@
                                        Box No
                                    </th>
                                    <th>
                                        @* @Html.DisplayNameFor(model => model.batchcode) *@
                                        Batch Code
                                    </th><th>
                                        @* @Html.DisplayNameFor(model => model.grnno) *@
                                        GRN No.
                                    </th>
                                    <th>
                                        @* @Html.DisplayNameFor(model => model.locationcode) *@
                                        Location
                                    </th>

                                </tr>
                            </thead>
                            <tbody class=" text-center">
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.productcode)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.boxno)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.batchcode)
                                        </td><td>
                                            @Html.DisplayFor(modelItem => item.grnno)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.locationcode)
                                        </td>


                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
    @* else if (role == "HOSITE")
    {
        <div class="container">
            <div class="alert alert-danger alert-dismissible fade show">
                <h6 class="alert-heading">
                    <i class="bi-exclamation-octagon-fill"></i>
                    No Access !!
                </h6>
                <p>
                    You do not have access to this page. Please contact your administrator for assistance.
                </p>
                <hr>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        </div>

    } *@
    else if (role == "WAREHOUSE")
    {
        <div class="container">
            <div class="alert alert-danger alert-dismissible fade show">
                <h6 class="alert-heading">
                    <i class="bi-exclamation-octagon-fill"></i>
                    No Access !!
                </h6>
                <p>
                    You do not have access to this page. Please contact your administrator for assistance.
                </p>
                <hr>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        </div>

    }
    else
    {
        <div class="container">
            <div class="alert alert-danger alert-dismissible fade show">
                <h6 class="alert-heading">
                    <i class="bi-exclamation-octagon-fill"></i>
                    No Access !!
                </h6>
                <p>
                    You do not have access to this page. Please contact your administrator for assistance.
                </p>
                <hr>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        </div>
    }
}
<style>
    /* Loading indicator */
    .loading-indicator {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent black background */
        text-align: center;
        z-index: 9999;
    }

    /* Spinner */
    .spinner {
        border: 6px solid #f3f3f3; /* Light gray border */
        border-top: 6px solid #3498db; /* Blue border */
        border-radius: 50%;
        width: 50px;
        height: 50px;
        margin: auto;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        animation: spin 2s linear infinite; /* CSS animation */
    }

</style>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jspdf-autotable@3.5.13/dist/jspdf.plugin.autotable.min.js"></script>
<script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.datatables.net/1.11.2/js/jquery.dataTables.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>
@* <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
 *@
<script>
    var jsPDF = window.jspdf.jsPDF;
    // function convertToPDF(columnNames, tableData) {
    //     var doc = new jsPDF();
    //     var currentDate = new Date();
      
    //     var additionalText = 'EROS GENERAL AGENCIES PVT LTD.';
    //     var pageWidth = doc.internal.pageSize.getWidth();
    //     var additionalTextX = pageWidth / 2;
    //     doc.setFontSize(14);
    //     doc.text(additionalText, additionalTextX, 10, { align: 'center' });

    //     var heading1 = 'Storage Location Report';
    //     var currentDate = new Date();
    //     var day = currentDate.getDate();
    //     var month = currentDate.getMonth() + 1; // Month is zero-based, so add 1
    //     var year = currentDate.getFullYear();
    //     var formattedDate = (day < 10 ? '0' : '') + day + '/' + (month < 10 ? '0' : '') + month + '/' + year; // Format date as dd/mm/yyyy
    //     var formattedTime = currentDate.toTimeString().slice(0, 8); // Format time
    //     var pageWidth = doc.internal.pageSize.getWidth();
    //     var headingX = pageWidth / 2;
    //     doc.setFontSize(10);
    //     doc.text(heading1 + ' - Generated on: ' + formattedDate + ' ' + formattedTime, headingX, 16, { align: 'center' });

    //     var selectedColumns = ['0', '1', '2', '3', '4'];

    //     var rows = tableData.map(row => selectedColumns.map(column => (row[column] !== undefined) ? row[column].toString() : ''));

    //     doc.autoTable({
    //         head: [columnNames],
    //         body: rows,
    //         startY: 30, // Start below the date and time text
    //         styles: {
    //             fontSize: 9,
    //             cellPadding: 2,
    //             valign: 'middle',
    //             halign: 'left',
    //         },
    //         margin: { top: 20 },
    //     });

    //     doc.save('productWithLocationreport_.pdf');
    //     console.log("Doc Generated Successfully!");
    // }
    function convertToPDF(columnNames, tableData) {
        var doc = new jsPDF();
        var currentDate = new Date();

        // Convert the image dynamically to base64
        var imgElement = new Image();
        imgElement.src = '/img/logo1.png'; // Use the relative path for your image
        imgElement.onload = function () {
            var canvas = document.createElement("canvas");
            canvas.width = imgElement.width;
            canvas.height = imgElement.height;
            var ctx = canvas.getContext("2d");
            ctx.drawImage(imgElement, 0, 0);
            var logoBase64 = canvas.toDataURL("image/png"); // Convert the image to base64

            var logoWidth = 18;  // Set the desired width
            var logoHeight = 15; // Set the desired height
            var pageWidth = doc.internal.pageSize.getWidth(); // Get page width

            // Calculate X position to center the logo
            var logoX = (pageWidth - logoWidth) / 2;

            // Insert logo at the top center
            doc.addImage(logoBase64, 'PNG', logoX, 5, logoWidth, logoHeight);

            // Add company name below the logo
            var additionalText = 'EROS GENERAL AGENCIES PVT LTD.';
            var additionalTextX = pageWidth / 2;

            doc.setFontSize(14);
            doc.text(additionalText, additionalTextX, 25, { align: 'center' }); // Adjust Y position to avoid overlapping with the logo

            // Add report heading and date/time below the company name
            var heading1 = 'Storage Location Report';
            var day = currentDate.getDate();
            var month = currentDate.getMonth() + 1; // Month is zero-based, so add 1
            var year = currentDate.getFullYear();
            var formattedDate = (day < 10 ? '0' : '') + day + '/' + (month < 10 ? '0' : '') + month + '/' + year; // Format date as dd/mm/yyyy
            var formattedTime = currentDate.toTimeString().slice(0, 8); // Format time
            var headingX = pageWidth / 2;

            doc.setFontSize(10);
            doc.text(heading1 + ' - Generated on: ' + formattedDate + ' ' + formattedTime, headingX, 32, { align: 'center' }); // Adjust Y position below the title

            // Prepare table content
            var selectedColumns = ['0', '1', '2', '3', '4'];
            var rows = tableData.map(row => selectedColumns.map(column => (row[column] !== undefined) ? row[column].toString() : ''));

            // Create table below the header
            doc.autoTable({
                head: [columnNames],
                body: rows,
                startY: 40, // Start below the heading and date
                styles: {
                    fontSize: 9,
                    cellPadding: 2,
                    valign: 'middle',
                    halign: 'left',
                },
                margin: { top: 20 },
            });

            // Save the PDF
            doc.save('productWithLocationreport_.pdf');
            console.log("Doc Generated Successfully!");
        };
    }
    function generatePDF() {
        var customHeader = 'Custom PDF Header';
        var columnNames = ['Pro.Code', 'Box No.', 'Batch ', 'GRN NO.', 'Location'];

        // Get all the data from DataTable
        var dataTable = $('#dataTable').DataTable();
        var tableData = dataTable.rows().data().toArray();

        convertToPDF(columnNames, tableData);
    }
</script>

<script>
    function exportToExcel() {
        function formatDate(date) {
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }

        const now = new Date();
        const formattedDate = formatDate(now);
        const formattedTime = now.toLocaleTimeString();
        const sheetHeading = ['EROS GENERAL AGENCIES PVT.LTD'];
        const SubHeading = ['Excel generated on ' + formattedDate + ' at ' + formattedTime];
        const tableHeading = ['Pro Code', 'Box No', 'Batch ', 'GRN No', 'Location'];


        // const sheetHeading = ['EROS GENERAL AGENCIES PVT.LTD'];
        // const SubHeading = ['Excel generated on ' + (new Date().toLocaleDateString()) + ' at ' + (new Date().toLocaleTimeString())];
        // const tableHeading = ['Prod.Code', 'Box No', 'Batch Code', 'GRN No', 'Location'];

        // Collecting data from all pages of the table
        const wsData = [sheetHeading, SubHeading, tableHeading];

        // Function to collect data from all pages
        function collectDataFromAllPages() {
            var dataTable = $('#dataTable').DataTable();
            var pageCount = dataTable.page.info().pages;

            for (let i = 0; i < pageCount; i++) {
                dataTable.page(i).draw('page');
                $('#dataTable tbody tr').each(function () {
                    const rowData = [];
                    $(this).find('td').each(function () {
                        rowData.push($(this).text().trim());
                    });
                    wsData.push(rowData);
                });
            }

            // Restore the original page
            dataTable.page(0).draw('page');
        }

        // Collect data from all pages of the DataTable
        collectDataFromAllPages();

        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Order Sheet');

        // Define border style
        const borderStyle = {
            top: { style: 'thin' },
            left: { style: 'thin' },
            bottom: { style: 'thin' },
            right: { style: 'thin' }
        };

        // Add and style the sheet heading
        const headingRow = worksheet.addRow(sheetHeading);
        headingRow.font = { bold: true, size: 14 };
        worksheet.mergeCells('A1:E1');
        headingRow.alignment = { horizontal: 'center', vertical: 'center' };
        headingRow.eachCell((cell) => {
            cell.border = borderStyle;
        });

        const headingRow1 = worksheet.addRow(SubHeading);
        worksheet.mergeCells('A2:E2');
        headingRow1.font = { size: 10 };
        headingRow1.alignment = { horizontal: 'center', vertical: 'center' };
        headingRow1.eachCell((cell) => {
            cell.border = borderStyle;
        });

        // Add and style the table heading
        const headerRow = worksheet.addRow(tableHeading);
        headerRow.eachCell((cell) => {
            cell.font = { bold: true, size: 14 };
            cell.alignment = { horizontal: 'center', vertical: 'center' };
            cell.border = borderStyle;
        });

        // Add data rows and center align, with special alignment for the first two columns
        wsData.slice(3).forEach(dataRow => {
            const row = worksheet.addRow(dataRow);
            row.eachCell((cell, colNumber) => {
                if (colNumber === 1) {
                    cell.alignment = { horizontal: 'left', vertical: 'top', wrapText: true };
                } else {
                    cell.alignment = { horizontal: 'center', vertical: 'center' };
                }
                cell.border = borderStyle;
            });
        });

        // Set specific widths for the columns
        worksheet.columns = [
            { width: 34 },  // Set width for the first column
            { width: 15 },  // Set width for the second column
            { width: 15 },  // Set width for the third column
            { width: 15 },  // GRN No column width
            { width: 15 }   // Location column width
        ];

        // Generate Excel file and trigger download
        workbook.xlsx.writeBuffer().then(function (buffer) {
            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Location_Wise_Storage.xlsx');
        });
    }
</script>

