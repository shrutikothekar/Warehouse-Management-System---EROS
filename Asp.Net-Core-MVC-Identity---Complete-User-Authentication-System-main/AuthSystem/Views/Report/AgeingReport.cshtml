@* @model List<eros.Models.InStockQty> *@
    @model IEnumerable<eros.Models.InStockQty>

@{
    ViewData["Title"] = "Current Quantity";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // Model.Sort((x, y) => string.Compare(x.productcode, y.productcode));
    string role = Context.Request.HttpContext.Session.GetString("Role");
    var jsonData = Context.Request.HttpContext.Session.GetString("MenuMaster");
    // Model.Sort((x, y) => y.currentqty.CompareTo(x.currentqty));
}




@if (!string.IsNullOrEmpty(role))
{
    @if (role == "ADMIN" || role == "WAREHOUSE")
    {
        <div id="spinner" style="display: none;">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p class="mt-2">Generating PDF...</p>
        </div>

        <div class="container-field">
            <div class="mt-3">
                <div class="card mb-3">
                    <div class="card-header bg-dark text-white">
                        <div class="d-flex align-items-baseline">
                            <h5 class="mx-auto font-weight-bolder small-heading">Stock Ageing Analysis</h5>

                            <a onclick="exportToPdf()" class="btn btn-danger btn-sm text-white mr-1"><i class="fas fa-file-pdf"></i>Pdf</a>
                            <a id="downloadExcel" class="btn btn-success text-white btn-sm mr-1">
                                <i class="fas fa-file-excel"></i>
                                Excel
                            </a>
                            <a style="display:none" onclick="printContent()" class="btn btn-primary btn-sm text-white mr-1">
                                <i class="fas fa-print"></i> Print
                            </a>
                            <a asp-action="Index" asp-controller="Home" class="btn btn-success btn-sm text-white mr-1">
                                <i class="fa fa-reply"></i> Back
                            </a>
                        </div>
                    </div>
                    <div class="mt-4">
                        <div class="row  ml-3">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label for="fromDate" class="font-weight-bold">From Date:</label>
                                    <input type="date" class="form-control" id="fromDate" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label for="toDate" class="font-weight-bold">To Date:</label>
                                    <input type="date" class="form-control" id="toDate" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12" id="pendingOrdersContainer">
                                @* @Html.Partial("AgeingView", Model) *@
                                <div class="card-body">
                                    <div class="table-responsive filteredDataTable">
                                        <table class="table table-bordered table-hover text-center table-sm mt-0 pt-0" id="dataTable" width="100%" cellspacing="0">
                                            <thead class="thead-light text-center">
                                                <tr class="small">
                                                    <th>No.</th>
                                                    <th>Product Code</th>
                                                    <th>Total In Qty</th>
                                                    <th> Less 30 </th>
                                                    <th>30 to 60</th>
                                                    <th>60 to 90 </th>
                                                    <th>90 to 180 </th>
                                                    <th>180 to 270 </th>
                                                    <th>270 to 365 </th>
                                                    <th>365 to 1460 </th>
                                                    <th> > 1460  </th>

                                                </tr>
                                            </thead>
                                            <tbody class="small text-center">
                                                @{
                                                    int counter = 1;
                                                }
                                                @foreach (var quantity in Model)
                                                {
                                                    <tr>
                                                        <td>@counter</td>
@*                                                       <td style="width:250px;text-align:left">@Html.DisplayFor(modelItem => quantity.productcode)</td>
 *@
                                                        <td style="width: 250px; text-align: left; cursor: pointer;">
                                                            <a href="#" class="product-code-link">@Html.DisplayFor(modelItem => quantity.productcode)</a>
                                                        </td>
                                                        <td style="width:250px;">@Html.DisplayFor(modelItem => quantity.currentqty)</td>
                                                        <td style="width:250px;">@Html.DisplayFor(modelItem => quantity.less30days)</td>
                                                        <td style="width:250px;">@Html.DisplayFor(modelItem => quantity.days30to60)</td>
                                                        <td style="width:250px;">@Html.DisplayFor(modelItem => quantity.days60to90)</td>
                                                        <td style="width:250px;">@Html.DisplayFor(modelItem => quantity.days90to180)</td>
                                                        <td style="width:250px;">@Html.DisplayFor(modelItem => quantity.days180to270)</td>
                                                        <td style="width:250px;">@Html.DisplayFor(modelItem => quantity.days270to365)</td>
                                                        <td style="width:250px;">@Html.DisplayFor(modelItem => quantity.days365to1460)</td>
                                                        <td style="width:250px;">@Html.DisplayFor(modelItem => quantity.above1460days)</td>

                                                    </tr>
                                                    counter++;
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    }
    else if (role == "HOSITE")
    {
        <div class="container">
            <div class="alert alert-danger alert-dismissible fade show">
                <h6 class="alert-heading">
                    <i class="bi-exclamation-octagon-fill"></i>
                    No Access !!
                </h6>
                <p>
                    You do not have access to this page. Please contact your administrator for assistance.
                </p>
                <hr>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        </div>
    }
    else
    {
        <div class="container">
            <div class="alert alert-danger alert-dismissible fade show">
                <h6 class="alert-heading">
                    <i class="bi-exclamation-octagon-fill"></i>
                    No Access !!
                </h6>
                <p>
                    You do not have access to this page. Please contact your administrator for assistance.
                </p>
                <hr>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        </div>
    }
}
<!-- Modal HTML -->
<div id="productModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Product Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Product Code: <span id="modalProductCode"></span></p>
                <!-- Add more details here -->
                <table class="table table-bordered" id="storeOperationsTable">
                    <thead>
                        <tr>
                            <th>Product Code</th>
                            <th>Box No</th>
                            <th>Location </th>
                            <th>Batch Code</th>
                            <th>GRN No</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Data will be dynamically populated here -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <!-- Add additional buttons if needed -->
            </div>
        </div>
    </div>
</div>


@* PDF *@
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
<script src="~/js/xlsx.full.min.js"></script>

@* EXCEL *@
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>
<script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>

<style>
    label {
        font-size: small; /* You can also use specific values like 10px or 0.8em */
        font-weight: 700;
    }
    .small-heading {
        font-size: 1rem; /* Adjust the font size as needed */
    }
</style>

<style>
    #spinner {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000; /* Ensure it's above other content */
        background-color: rgba(255, 255, 255, 0.8);
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        text-align: center;
    }
</style>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
<script>
    // $('#dataTable').on('click', '.product-code-link', function (event) {
    //     event.preventDefault(); // Prevent default link behavior (e.g., navigating)
    //     var productCode = $(this).text().trim(); // Get the product code from the clicked link
    //     $('#modalProductCode').text(productCode); // Set the product code in the modal
    //     // Show the modal
    //     $('#productModal').modal('show');
    // });
    $('#dataTable').on('click', '.product-code-link', function (event) {
        event.preventDefault(); // Prevent default link behavior (e.g., navigating)
        var productCode = $(this).text().trim(); // Get the product code from the clicked link
        $('#modalProductCode').text(productCode); // Set the product code in the modal
        $.ajax({
            url: '/Report/GetStoreOperations', // Replace with your controller and action method
            type: 'GET',
            data: { productCode: productCode }, // Pass product code as a parameter
            dataType: 'json',
            success: function (data) {
                $('#storeOperationsTable tbody').empty();
                $.each(data, function (index, item) {
                    var row = `<tr>
                                   <td>${item.productcode}</td>
                                   <td>${item.boxno}</td>
                                   <td>${item.locationcode}</td>
                                   <td>${item.batchcode}</td>
                                   <td>${item.grnno}</td>
                               </tr>`;
                    $('#storeOperationsTable tbody').append(row);
                });
                $('#productModal').modal('show');
            },
            error: function (error) {
                console.error('Error fetching data:', error);
            }
        });
    });
    function filterTable() {
        var dataTable = $('#dataTable').DataTable();
        updateSerialNumbers();
    }
    function updateSerialNumbers() {
        $('#dataTable tbody tr').each(function (index) {
            $(this).find('td').eq(0).text(index + 1);
        });
    }
</script>
<script>
    $('#fromDate, #toDate').on('change', function () {
        var fromDate = $('#fromDate').val();
        var toDate = $('#toDate').val();
        console.log("Selected From Date: " + fromDate);
        console.log("Selected To Date: " + toDate);

        // $.ajax({
        //     url: '@Url.Action("FilterDataByDate", "Report")',
        //     type: 'GET',
        //     data: { fromDate: fromDate, toDate: toDate },
        //     success: function (result) {
        //         console.log("Count of items: " + result.length);

        //         $('#dataTable tbody').empty();

        //         var tableBodyHtml = '';

        //         // Iterate through each item in the JSON array
        //         $.each(result, function (index, item) {
        //             tableBodyHtml += '<tr>';
        //             tableBodyHtml += '<td>' + (index + 1) + '</td>';
        //             tableBodyHtml += '<td style="width:250px;text-align:left">' + item.productcode + '</td>';
        //             tableBodyHtml += '<td style="width:250px;">' + item.currentqty + '</td>';
        //             tableBodyHtml += '<td style="width:250px;">' + item.less30days + '</td>';
        //             tableBodyHtml += '<td style="width:250px;">' + item.days30to60 + '</td>';
        //             tableBodyHtml += '<td style="width:250px;">' + item.days60to90 + '</td>';
        //             tableBodyHtml += '<td style="width:250px;">' + item.days90to180 + '</td>';
        //             tableBodyHtml += '<td style="width:250px;">' + item.days180to270 + '</td>';
        //             tableBodyHtml += '<td style="width:250px;">' + item.days270to365 + '</td>';
        //             tableBodyHtml += '<td style="width:250px;">' + item.days365to1460 + '</td>';
        //             tableBodyHtml += '<td style="width:250px;">' + item.above1460days + '</td>';
        //             tableBodyHtml += '</tr>';
        //         });

        //         $('#dataTable tbody').html(tableBodyHtml);

        //         // Update filteredData with the result
        //         filteredData = result.map(item => [
                    
        //             item.productcode,
        //             item.currentqty,
        //             item.less30days,
        //             item.days30to60,
        //             item.days60to90,
        //             item.days90to180,
        //             item.days180to270,
        //             item.days270to365,
        //             item.days365to1460,
        //             item.above1460days,
        //         ]);
        //     },
        //     error: function () {
        //         console.log("An error occurred while executing the action.");
        //     }
        // });

        $.ajax({
            url: '@Url.Action("FilterDataByDate", "Report")',
            type: 'GET',
            data: { fromDate: fromDate, toDate: toDate },
            success: function (result) {
                console.log("Count of items: " + result.length);

                $('#dataTable tbody').empty();

                var tableBodyHtml = '';

                // Iterate through each item in the JSON array
                $.each(result, function (index, item) {
                    tableBodyHtml += '<tr>';
                    tableBodyHtml += '<td>' + (index + 1) + '</td>';
                    tableBodyHtml += '<td style="width:250px;text-align:left">' + item.productcode + '</td>';
                    tableBodyHtml += '<td style="width:250px;">' + item.currentqty + '</td>';
                    tableBodyHtml += '<td style="width:250px;">' + item.less30days + '</td>';
                    tableBodyHtml += '<td style="width:250px;">' + item.days30to60 + '</td>';
                    tableBodyHtml += '<td style="width:250px;">' + item.days60to90 + '</td>';
                    tableBodyHtml += '<td style="width:250px;">' + item.days90to180 + '</td>';
                    tableBodyHtml += '<td style="width:250px;">' + item.days180to270 + '</td>';
                    tableBodyHtml += '<td style="width:250px;">' + item.days270to365 + '</td>';
                    tableBodyHtml += '<td style="width:250px;">' + item.days365to1460 + '</td>';
                    tableBodyHtml += '<td style="width:250px;">' + item.above1460days + '</td>';
                    tableBodyHtml += '</tr>';
                });

                $('#dataTable tbody').html(tableBodyHtml);

                // Update filteredData with the result
                filteredData = result.map((item, index) => [
                    (index + 1).toString(), // Serial number
                    item.productcode,
                    item.currentqty,
                    item.less30days,
                    item.days30to60,
                    item.days60to90,
                    item.days90to180,
                    item.days180to270,
                    item.days270to365,
                    item.days365to1460,
                    item.above1460days
                ]);
            },
            error: function () {
                console.log("An error occurred while executing the action.");
            }
        });
    });
</script>
<script>
    $('#downloadExcel').click(function () {
        function formatDate(date) {
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }

        const now = new Date();
        const formattedDate = formatDate(now);
        const formattedTime = now.toLocaleTimeString();
        const sheetHeading = ['EROS GENERAL AGENCIES PVT. LTD.'];
        const SubHeading = ['Stock Ageing Analysis - Excel generated on ' + formattedDate + ' at ' + formattedTime];
        const tableHeading = ['Sr.No', 'Product Code', 'Total Qty', '(< 30 days)', '30 to 60 days', '60 to 90 days', '90 to 180 days', '180 to 270 days', '270 to 365 days', '365 to 1460 days', '(> 1460 days)'];

        let dataToExport = []; // Array to hold the data to be exported

        // Check if fromDate and toDate are selected
        const fromDate = $('#fromDate').val();
        const toDate = $('#toDate').val();

        if (fromDate && toDate) {
            // Filtered export: Make AJAX call to fetch filtered data
            $.ajax({
                url: '@Url.Action("FilterDataByDate", "Report")',
                type: 'GET',
                data: { fromDate: fromDate, toDate: toDate },
                success: function (result) {
                    console.log("Filtered data:", result);

                    // Prepare data for export
                    dataToExport = result.map(item => [
                        item.productcode.trim(),
                        parseFloat(item.currentqty),
                        parseFloat(item.less30days),
                        parseFloat(item.days30to60),
                        parseFloat(item.days60to90),
                        parseFloat(item.days90to180),
                        parseFloat(item.days180to270),
                        parseFloat(item.days270to365),
                        parseFloat(item.days365to1460),
                        parseFloat(item.above1460days)
                    ]);

                    // Generate and export Excel
                    exportExcel(dataToExport);
                },
                error: function () {
                    console.log("An error occurred while fetching filtered data.");
                }
            });
        } else {
            // Non-filtered export: Export all data from DataTable
            const dataTable = $('#dataTable').DataTable();
            const filteredData = dataTable.rows({ search: 'applied' }).data().toArray();

            dataToExport = filteredData.map(row => [
                // row[1].trim(), // Particulars
                $(row[1]).text().trim(), // Extract text from the <a> tag for Product Code
                parseFloat(row[2]), // Total Qty
                parseFloat(row[3]), // < 30 days
                parseFloat(row[4]), // 30 to 60 days
                parseFloat(row[5]), // 60 to 90 days
                parseFloat(row[6]), // 90 to 180 days
                parseFloat(row[7]), // 180 to 270 days
                parseFloat(row[8]), // 270 to 365 days
                parseFloat(row[9]), // 365 to 1460 days
                parseFloat(row[10]) // > 1460 days
            ]);

            // Generate and export Excel
            exportExcel(dataToExport);
        }

        function exportExcel(data) {
            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Stock Ageing Analysis');

            const borderStyle = {
                top: { style: 'thin' },
                left: { style: 'thin' },
                bottom: { style: 'thin' },
                right: { style: 'thin' }
            };

            const headingRow = worksheet.addRow(sheetHeading);
            headingRow.font = { bold: true, size: 14 };
            worksheet.mergeCells('A1:K1');
            headingRow.alignment = { horizontal: 'center', vertical: 'center' };
            headingRow.eachCell((cell) => {
                cell.border = borderStyle;
            });

            const headingRow1 = worksheet.addRow(SubHeading);
            worksheet.mergeCells('A2:K2');
            headingRow1.font = { size: 10 };
            headingRow1.alignment = { horizontal: 'center', vertical: 'center' };
            headingRow1.eachCell((cell) => {
                cell.border = borderStyle;
            });

            const headerRow = worksheet.addRow(tableHeading);
            headerRow.eachCell((cell) => {
                cell.font = { bold: true, size: 12 };
                cell.alignment = { horizontal: 'center', vertical: 'center' };
                cell.border = borderStyle;
            });

            // Populate worksheet with dataToExport
            dataToExport.forEach((dataRow, index) => {
                const row = worksheet.addRow([index + 1, ...dataRow]); // Sr.No + dataRow

                for (let i = 0; i < tableHeading.length; i++) { // Loop through all columns in tableHeading
                    const cell = row.getCell(i + 1); // i + 1 because Excel columns are 1-based

                    cell.alignment = { horizontal: 'center', vertical: 'center' };
                    cell.border = borderStyle;

                    // Apply numeric formatting for numeric columns (index 1 to 10)
                    if (i >= 1 && i <= 10 && !isNaN(parseFloat(dataRow[i - 1])) && isFinite(dataRow[i - 1])) {
                        cell.value = parseFloat(dataRow[i - 1]); // Ensure numeric value
                        cell.numFmt = '#,##0'; // Numeric format with thousand separators
                    }

                    // Apply bold font for numeric values in columns 2 to 10
                    if (i >= 1 && i <= 10 && parseFloat(dataRow[i - 1]) > 0) {
                        cell.font = { bold: true };
                    }
                }
            });

            // Set the column widths
            const columnWidths = [7, 35, 10, 14, 14, 14, 15, 17, 17, 17, 15];
            worksheet.columns.forEach((column, index) => {
                column.width = columnWidths[index];
            });

            // Generate and save the Excel file
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Stock_Ageing.xlsx');
            });
        }
    });
</script>
<script>
    var filteredData = [];
    // function exportToPdf() {
    //     // Show spinner
    //     $('#spinner').show();

    //     var heading = 'EROS GENERAL AGENCIES PVT. LTD.';

    //     // Define the indices of the selected columns (0-based index)
    //     var selectedColumns = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

    //     // Function to extract data from the current page
    //     function extractDataFromPage() {
    //         var pageData = [];
    //         $('#dataTable tbody tr').each(function () {
    //             var rowData = [];
    //             $(this).find('td').each(function (index) {
    //                 if (selectedColumns.includes(index)) {
    //                     rowData.push($(this).text().trim());
    //                 }
    //             });
    //             pageData.push(rowData);
    //         });
    //         return pageData;
    //     }

    //     // Function to extract data from all pages
    //     function extractDataFromAllPages() {
    //         var allData = [];
    //         var table = $('#dataTable').DataTable();
    //         var totalPages = table.page.info().pages;

    //         for (var pageIndex = 0; pageIndex < totalPages; pageIndex++) {
    //             table.page(pageIndex).draw('page');
    //             allData = allData.concat(extractDataFromPage());
    //         }

    //         // Reset back to the first page
    //         table.page('first').draw('page');
    //         return allData;
    //     }

    //     // Check if filtered data is available and use it, otherwise collect all data
    //     var data = filteredData.length > 0 ? filteredData.map(row => selectedColumns.map(index => row[index])) : extractDataFromAllPages();

    //     // Get the current date and time
    //     const currentDate = new Date();
    //     const formattedDate = ("0" + currentDate.getDate()).slice(-2) + "-" +
    //         ("0" + (currentDate.getMonth() + 1)).slice(-2) + "-" +
    //         currentDate.getFullYear();
    //     const formattedTime = currentDate.toLocaleTimeString();
    //     const dateTimeString = `Generated on: ${formattedDate} at ${formattedTime}`;

    //     // Create subheading text
    //     const subHeadingText = ` Orders Details (${dateTimeString})`;

    //     var element = document.createElement('div');
    //     element.innerHTML = `
    //             <h2 style="text-align: center; font-size: 12px;">${heading}</h2>
    //             <h6 style="text-align: center; font-size: 12px;">${subHeadingText}</h6>
    //             <table style="border-collapse: collapse; width: 100%; font-size: 10px; margin-top: 3px;">
    //                 <thead>
    //                     <tr style="background-color: #f2f2f2;">
    //                         ${selectedColumns.includes(0) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">SR.No</th>' : ''}
    //                         ${selectedColumns.includes(1) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">productcode</th>' : ''}
    //                         ${selectedColumns.includes(2) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">Total In Qty</th>' : ''}
    //                         ${selectedColumns.includes(3) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">(< 30)</th>' : ''}
    //                         ${selectedColumns.includes(4) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">30 to 60</th>' : ''}
    //                         ${selectedColumns.includes(5) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">60 to 90</th>' : ''}
    //                         ${selectedColumns.includes(6) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">90 to 180</th>' : ''}
    //                         ${selectedColumns.includes(7) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">180 to 270</th>' : ''}
    //                         ${selectedColumns.includes(8) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">270 to 365</th>' : ''}
    //                         ${selectedColumns.includes(9) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">365 to 1460</th>' : ''}
    //                         ${selectedColumns.includes(10) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">(> 1460 )</th>' : ''}
    //                     </tr>
    //                 </thead>
    //                 <tbody>
    //                     ${data.map((row, index) => `
    //                         <tr>
    //                             ${row.map(cell => `<td style="border: 1px solid #ddd; text-align:center; padding: 2px;">${cell}</td>`).join('')}
    //                         </tr>
    //                     `).join('')}
    //                 </tbody>
    //             </table>
    //         `;

    //     var options = {
    //         margin: [10, 10, 10, 10],
    //         filename: 'Stock_Ageing.pdf',
    //         image: { type: 'jpeg', quality: 1.0 },
    //         html2canvas: { scale: 4 },  // Increase scale for better quality
    //         jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
    //     };

    //     // html2pdf().set(options).from(element).save();
    //     // Generate and save the PDF
    //     html2pdf()
    //         .set(options)
    //         .from(element)
    //         .save()
    //         .then(() => {
    //             // Hide spinner on success
    //             $('#spinner').hide();
    //         })
    //         .catch(error => {
    //             console.error('Error generating PDF:', error);
    //             // Hide spinner on error (optional, depends on your error handling strategy)
    //             $('#spinner').hide();
    //         });
    // }
    function exportToPdf() {
        // Show spinner
        $('#spinner').show();

        var heading = 'EROS GENERAL AGENCIES PVT. LTD.';

        // Define the indices of the selected columns (0-based index)
        var selectedColumns = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

        // Function to extract data from the current page
        function extractDataFromPage() {
            var pageData = [];
            $('#dataTable tbody tr').each(function () {
                var rowData = [];
                $(this).find('td').each(function (index) {
                    if (selectedColumns.includes(index)) {
                        rowData.push($(this).text().trim());
                    }
                });
                pageData.push(rowData);
            });
            return pageData;
        }

        // Function to extract data from all pages
        function extractDataFromAllPages() {
            var allData = [];
            var table = $('#dataTable').DataTable();
            var totalPages = table.page.info().pages;

            for (var pageIndex = 0; pageIndex < totalPages; pageIndex++) {
                table.page(pageIndex).draw('page');
                allData = allData.concat(extractDataFromPage());
            }

            // Reset back to the first page
            table.page('first').draw('page');
            return allData;
        }

        // Check if filtered data is available and use it, otherwise collect all data
        var data = filteredData.length > 0 ? filteredData.map(row => selectedColumns.map(index => row[index])) : extractDataFromAllPages();

        // Get the current date and time
        const currentDate = new Date();
        const formattedDate = ("0" + currentDate.getDate()).slice(-2) + "-" +
            ("0" + (currentDate.getMonth() + 1)).slice(-2) + "-" +
            currentDate.getFullYear();
        const formattedTime = currentDate.toLocaleTimeString();
        const dateTimeString = `Generated on: ${formattedDate} at ${formattedTime}`;

        // Create subheading text
        const subHeadingText = ` Orders Details (${dateTimeString})`;

        var element = document.createElement('div');
        element.innerHTML = `
                   <div style="text-align: center;">
                        <img src="/img/logo1.png" alt="Company Logo" style="width: 60px; height: auto; margin-bottom: 5px;"/>
                        <h2 style="font-size: 12px;">${heading}</h2>
                        <h6 style="font-size: 12px;">${subHeadingText}</h6>
                    </div>
                    <table style="border-collapse: collapse; width: 100%; font-size: 10px; margin-top: 3px;">
                        <thead>
                            <tr style="background-color: #f2f2f2;">
                                ${selectedColumns.includes(0) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">SR.No</th>' : ''}
                                ${selectedColumns.includes(1) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">productcode</th>' : ''}
                                ${selectedColumns.includes(2) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">Total In Qty</th>' : ''}
                                ${selectedColumns.includes(3) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">(< 30)</th>' : ''}
                                ${selectedColumns.includes(4) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">30 to 60</th>' : ''}
                                ${selectedColumns.includes(5) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">60 to 90</th>' : ''}
                                ${selectedColumns.includes(6) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">90 to 180</th>' : ''}
                                ${selectedColumns.includes(7) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">180 to 270</th>' : ''}
                                ${selectedColumns.includes(8) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">270 to 365</th>' : ''}
                                ${selectedColumns.includes(9) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">365 to 1460</th>' : ''}
                                ${selectedColumns.includes(10) ? '<th style="border: 1px solid #ddd; padding: 2px;text-align:center;">(> 1460 )</th>' : ''}
                            </tr>
                        </thead>
                        <tbody>
                            ${data.map((row, index) => `
                                <tr>
                                    ${row.map(cell => `<td style="border: 1px solid #ddd; text-align:center; padding: 2px;">${cell}</td>`).join('')}
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;

        var options = {
            margin: [10, 10, 10, 10],
            filename: 'Stock_Ageing.pdf',
            image: { type: 'jpeg', quality: 1.0 },
            html2canvas: { scale: 4 },  // Increase scale for better quality
            jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
        };

        // html2pdf().set(options).from(element).save();
        // Generate and save the PDF
        html2pdf()
            .set(options)
            .from(element)
            .save()
            .then(() => {
                // Hide spinner on success
                $('#spinner').hide();
            })
            .catch(error => {
                console.error('Error generating PDF:', error);
                // Hide spinner on error (optional, depends on your error handling strategy)
                $('#spinner').hide();
            });
    }

</script>